面向对象四大特性：封装、继承、多态、抽象
1.封装：一个类就是一个封装了属性和方法的逻辑实体。在一个对象内部，属性和方法存在不同级别的访问权限保护，以防止程序中无关的部分意外的改变或错误的使用了对象的私有部分。
封装保证了软件部件具有很好的模块性, 封装的目标是要实现软件部件的高内聚,低耦合,防止程序相互依赖性而带来的变动影响.

2.继承：可以使用现有类的所有功能，并在无需重新编写原来的类的情况下对这些功能进行扩展。 继承是子类自动共享父类数据和方法的机制，这是类之间的一种关系，提高了软件的可重用性和可扩展性。

3.多态：使具有不同内部结构的对象可以共享相同的外部接口。这意味着，虽然针对不同对象的具体操作不同，但通过一个公共的类，那些操作可以通过相同的方式调用。
4.抽象：抽象就是找出一些事物的相似和共性之处，然后将这些事物归为一个类，这个类只考虑这些事物的相似和共性之处，并且会忽略与当前主题和目标无关的那些方面，将注意力集中在与当前目标有关的方面。
例如，看到一只蚂蚁和大象，你能够想象出它们的相同之处，那就是抽象

五大基本原则
1>单一职责原则SRP(Single Responsibility Principle)是指一个类的功能要单一，不能包罗万象。
2>开放封闭原则OCP(Open－Close Principle)
一个模块在扩展性方面应该是开放的而在更改性方面应该是封闭的。比如：一个网络模块，原来只服务端功能，而现在要加入客户端功能，
那么应当在不用修改服务端功能代码的前提下，就能够增加客户端功能的实现代码，这要求在设计之初，就应当将服务端和客户端分开，公共部分抽象出来。

3>替换原则(the Liskov Substitution Principle LSP)
子类应当可以替换父类并出现在父类能够出现的任何地方。比如：公司搞年度晚会，所有员工可以参加抽奖，那么不管是老员工还是新员工，
也不管是总部员工还是外派员工，都应当可以参加抽奖，否则这公司就不和谐了。

4>依赖原则(the Dependency Inversion Principle DIP) 具体依赖抽象，上层依赖下层。
假设B是较A低的模块，但B需要使用到A的功能，这个时候，B不应当直接使用A中的具体类： 而应当由B定义一抽象接口，并由A来实现这个抽象接口，B只使用这个抽象接口：这样就达到
了依赖倒置的目的，B也解除了对A的依赖，反过来是A依赖于B定义的抽象接口。通过上层模块难以避免依赖下层模块，假如B也直接依赖A的实现，那么就可能造成循环依赖。一个常见的问题就是编译A模块时需要直接包含到B模块的cpp文件，而编译B时同样要直接包含到A的cpp文件。

5>接口分离原则(the Interface Segregation Principle ISP)
模块间要通过抽象接口隔离开，而不是通过具体的类强耦合起来
